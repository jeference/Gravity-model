#IMPORTS THE LIBRARIES

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from scipy.optimize import curve_fit
import math
#import cv2 #Open CV
import scipy.signal
import csv
from decimal import Decimal

class Gravity():
    
    
    def __init__(self, bin_by_max = None,i=None,j=None):
        #Assigns variables
        self.dist = None
        self.pop_i = None
        self.pop_j = None
        self.flow = None
        self.bin_by_max = bin_by_max
        self.rmse = None
        self.r2 = None
        
        
    def model(self,idp_var,k,sigma):
        #Creates the model that will be used by scipy.optimize
        distance,population_i,population_j = idp_var 
        return (k*population_i*population_j)/(distance**sigma)
     
    
    def fit(self,dist,pop_i,pop_j,flow):
        ''' Optimizes K and Sigma model parameters. If bin_by_max values was passed on object instantiation, 
        it optimizes using only max flows for each of 'bin_by_max' distance intervals.
        
        Keyword args
        .............................................................................................................
        pop_i: Population array of region i.
        pop_j: Population array of region j.
        dist: distance array. Each line is the distance between i and j.
        flow: Flow array. Each line is the flow between i and j.
        '''
        self.dist = np.array(dist)
        self.pop_i = np.array(pop_i)
        self.pop_j = np.array(pop_j)
        self.flow = np.array(flow)
        
        if self.bin_by_max != None:
            
            
            def bin_by_max_flows(nbins):
                df = pd.DataFrame({'pop_i': self.pop_i, 'pop_j':self.pop_j,'distance':self.dist, 'flow':self.flow})
                df['dist_bins'] = pd.cut(df['distance'], nbins, right=True)
                df['dist_bins'] = df['dist_bins'].apply(lambda x: str(x).split(',')[1][:-1])
                max_flow_list, max_dist_list,max_pop_i_list,max_pop_j_list = [],[],[],[]
                for group,df in df.groupby('dist_bins'):
                    idx_maxflow = df['flow'].idxmax()
                    max_flow_list.append(df.loc[idx_maxflow, 'flow'])
                    max_dist_list.append(df.loc[idx_maxflow, 'distance'])
                    max_pop_i_list.append(df.loc[idx_maxflow, 'pop_i'])
                    max_pop_j_list.append(df.loc[idx_maxflow, 'pop_j'])
                return np.array(max_flow_list),np.array(max_dist_list),np.array(max_pop_i_list),np.array(max_pop_j_list)
            
            while True:
                try:
                    self.flow,self.dist,self.pop_i,self.pop_j = bin_by_max_flows(self.bin_by_max)
                except:
                    self.bin_by_max-=1
                    continue
                else:
                    break
                
            #Optimizes the model using scipy.optimize   
            param,cov = curve_fit(self.model,(self.dist,self.pop_i,self.pop_j),self.flow)
            self.k,self.sigma = param
            self.model_flow = np.array([self.k*pop_i*pop_j/dist**self.sigma for (dist,pop_i,pop_j) in list(zip(self.dist,self.pop_i,self.pop_j)) ])
            return param
        
        else:
            #Optimizes the model using scipy.optimize
            param,cov = curve_fit(self.model,(self.dist,self.pop_i,self.pop_j),self.flow)
            self.k,self.sigma = param
            self.model_flow = np.array([self.k*pop_i*pop_j/dist**self.sigma for (dist,pop_i,pop_j) in list(zip(self.dist,self.pop_i,self.pop_j))])
            return param    
    
    
    def score(self):
        ''' Returns the coefficient of determination and Root Mean Squared Error of the training data'''
        flow = self.flow
        model_flow = self.model_flow
        n = len(flow)
        r2 = np.corrcoef(flow,model_flow)[0,1]
        rmse = np.sqrt((1/n) * sum((flow - model_flow)**2))
        return r2,rmse
    
    def predict (self, dist, pop_i, pop_j):
        ''' Returns the model's prediction of the flow, using the previously optimized parameters.
        Keyword args
        .............................................................................................................
        pop_i: Population array of region i.
        pop_j: Population array of region j.
        dist: distance array. Each line is the distance between i and j.
        '''
        return self.k*np.array(pop_i)*np.array(pop_j)/np.array(dist)**self.sigma
        
